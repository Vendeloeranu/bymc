#!/bin/bash
#
# Verify properties with SMT by partial order schema tree.
#
# Igor Konnov, 2014

DIR=`dirname $0`
DIR=`cd "$DIR"; pwd`
# parse options
TEMPOPTS=`"$DIR"/script/ggetopt.py -o h --long help,limit-time:,limit-mem: -n '$@' -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

MEM_LIMIT="unlimited"
TIME_LIMIT="unlimited"

function help_and_quit() {
    echo "use $0 [switches] prog spec bymc_options"
    echo " where spec is one of those:"
    echo "   * <spec> -- check only the specification with the name <spec>"
    echo "   * all -- check all the available specifications"
    echo "   * bounds -- compute the diameter bounds (as in the CONCUR'14 paper)"
    echo ""
    echo " and the switches are"
    echo "  --limit-time: limit (in seconds) cpu time of subprocesses (ulimit -t)"
    echo "  --limit-mem: limit (in MB) virtual memory of subprocesses (ulimit -v)"
    echo "  -h|--help: show this help message"
    echo ""
    echo " bymc_options are as follows:"
    echo "  -O schema.tech=ltl          (default, safety + liveness as in POPL'17)"
    echo "  -O schema.tech=ltl-mpi      (parallel safety + liveness as in ISOLA'18)"
    echo "  -O schema.tech=cav15        (reachability as in CAV'15)"
    echo "  --smt 'lib2|z3|-smt2|-in'   (default, use z3 as the backend solver)"
    echo "  --smt 'lib2|mysolver|arg1|arg2|arg3'  (use an SMT2 solver)"
    echo "  --smt 'yices'               (use yices 1.x as the backend solver, DEPRECATED)"
    echo "  -v               (verbose output, all debug messages get printed)"
    echo ""
    echo " Fine tuning of schema.tech=ltl:"
    echo "  -O schema.incremental=1 (enable the incremental solver, default: 0)"
    echo ""
    echo "  -O schema.noflowopt=1  (disable the control flow optimizations, default: 0"
    echo "                          may lead to a combinatorial explosion of guards)"
    echo "  -O schema.noreachopt=1 (disable the reachability optimization, default: 0"
    echo "                          i.e., reachability is not checked on-the-fly)"
    echo "  -O schema.noadaptive=1 (disable the adaptive reachability optimization, default: 0"
    echo "                          i.e., the tool will not try to choose between"
    echo "                          enabling/disabling the reachability optimization)"
    echo "  -O schema.noguardpreds=1 (do not introduce predicates for"
    echo "                            the threshold guards, default: 0)"
    echo "  -O schema.compute-nschemas=1 (always compute the total number of"
    echo "                                schemas, even if takes long, default: 0)"

    exit 1
}

eval set -- "$TEMPOPTS"
while true ; do
    case "$1" in
    -h|--help) help_and_quit ;;
    --limit-time) TIME_LIMIT=$2 ; shift 2 ;;
    --limit-mem) MEM_LIMIT=$((1024*$2)) ; shift 2 ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; help_and_quit ;;
    esac
done

if [ "$#" -lt 2 ]; then
    echo "Too few arguments ($# found, at least 2 expected): " $@
    echo ""
    help_and_quit
fi

PROG=$1
SPEC=$2
shift 2
export BYMC_FLAGS="$@ $BYMC_FLAGS"

echo ulimit -SHv $MEM_LIMIT
ulimit -SHv $MEM_LIMIT
echo ulimit -SHt $TIME_LIMIT
ulimit -SHt $TIME_LIMIT

# run the tool
export TARGET_MC=post
`dirname $0`/script/refinement-loop.sh $PROG $SPEC

