/* a threshold automata for asynchronous binary agreement by Mostefaoui 2014 */

skel Proc {
  local pc;
  /* the number of messages sent by the correct processes */
  shared b0, b1, a0, a1 ;
  parameters N, T, F;

  define THRESH1 == T + 1;
  define THRESH2 == 2*T+1;
  define THRESH3 == N - F;

  assumptions (0) {
    N >= 3 * T + 1;
    T >= F;
    T >= 1;
  }

  locations (13) {
    locest0: [0];
    locest1: [1];
    locsbv0: [2];
    locsbv1: [3];
    locsbv01: [4];
    locbv0: [5];
    locbv1: [6];
    locbv0s1: [7];
    locbv1s0: [8];
    locbv01: [9];
    locav0: [10];
    locav1: [11];
    locav01: [12];
  }

  inits (0) {
    (locest0 + locest1) == N - F;

    locsbv0 == 0;
    locsbv1 == 0;
    locsbv01 == 0;
    locbv0 == 0;
    locbv1 == 0;
    locbv0s1 == 0;
    locbv1s0 == 0;
    locbv01 == 0;
    locav0 == 0;
    locav1 == 0;
    locav01 == 0;
    b0 == 0;
    b1 == 0;
    a0 == 0;
    a1 == 0;
  }

  rules (0) {
  /* send bv msg with estimate value 0 and 1*/
  0: locest0 -> locsbv0
      when (true)
      do { b0' == b0+1; unchanged(b1, a0, a1); };
  
  1: locest1 -> locsbv1
      when (true)
      do { b1' == b1 + 1; unchanged(b0, a0, a1); };

  /* send bv msg if received f+1 unsent bv value*/

  2: locsbv0 -> locsbv01
      when (b1 >= THRESH1 - F)
      do { b1' == b1+1; unchanged(b0, a0, a1); };

  3: locsbv1-> locsbv01
      when (b0 >= THRESH1 - F)
      do { b0' == b0+1; unchanged(b1, a0, a1); };

  4: locbv0 -> locbv0s1
      when (b1 >= THRESH1 - F)
      do { b1' == b1+1; unchanged(b0, a0, a1); };

  5: locbv1 -> locbv1s0
      when (b0 >= THRESH1 - F)
      do { b0' == b0+1; unchanged(b1, a0, a1); };

  /* take 0 or 1 into set bin-val and send resp aux msg */

  6: locsbv0 -> locbv0
      when (b0 >= THRESH2 -F)
      do {a0' == a0+1; unchanged(b0, b1, a1); }

  7: locsbv1 -> locbv1
      when (b1 >= THRESH2 -F)
      do {a1' == a1+1; unchanged(b0, b1, a0); }  


  8: locsbv01 -> locbv0s1
      when (b0 >= THRESH2 -F)
      do {a0' == a0+1; unchanged(b0, b1, a1); }

  9: locsbv01 -> locbv1s0
      when (b1 >= THRESH2 -F)
      do {a1' == a1+1; unchanged(b0, b1, a0); }

  /* take 0 or 1 into set bin-val and not send aux */

  10: locbv0s1 -> locbv01
      when (b1 >= THRESH2 - F)
      do { unchanged(b0, b1, a0, a1); }
    
  11: locbv1s0 -> locbv01
      when (b0 >= THRESH2 - F)
      do { unchanged(b0, b1, a0, a1); }

  /* exist such set vals {0} */
  12: locbv0 -> locav0
      when (a0 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }
  13: locbv0s1 -> locav0
      when (a0 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }
  14: locbv01 -> locav0
      when (a0 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }

  /* exist such set vals {1} */
  15: locbv1 -> locav1
      when (a1 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }
  16: locbv1s0 -> locav1
      when (a0 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }
  17: locbv01 -> locav1
      when (a1 >= THRESH3 - F)
      do { unchanged(b0, b1, a0, a1); }


  /* exist such set vals {0,1} */
  18: locbv01 -> locav01
      when ( (a0+a1) >= THRESH3 - F && a0 > 0 && a1 > 0)
      do { unchanged(b0, b1, a0, a1); }


  /* self-loops in all the locations */
  
  19: locsbv0 -> locsbv0
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  20: locsbv1 -> locsbv1
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  21: locsbv01 -> locsbv01
      when (true)
      do { unchanged(b0, b1, a0, a1); };   

  22: locbv0 -> locbv0
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  23: locbv1 -> locbv1
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  24: locbv01 -> locbv01
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  25: locbv0s1 -> locbv0s1
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  26: locbv1s0 -> locbv1s0
      when (true)
      do { unchanged(b0, b1, a0, a1); };

  }

  specifications (0) {
    /* Proposition 4.3: a process enters av[v] -> no process ever enters av[1-v] */
    d0: <>(locav0 != 0) -> [](locav1 == 0)
    d1: <>(locav1 != 0) -> [](locav0 == 0)
    /* Proposition 4.2: no process starts with v -> all processes enter av[1-v] */
    e0: [](locest0 == 0) -> [](locav0 == 0 && locav01 == 0)
    e1: [](locest1 == 0) -> [](locav1 == 0 && locav01 == 0)
   }
} /* Proc */


